# Default image (https://hub.docker.com/_/microsoft-dotnet-sdk)
# Multiarch image, it has both Linux and Windows versions
image: mcr.microsoft.com/dotnet/sdk:6.0

stages:
  - build
  #- test
  - deploy

before_script:
  - dotnet --version

# Build model
# (Uses Linux-based runner, because windows tag is NOT specified.)
build:model:
  stage: build
  script:
    - dotnet build CCity.Model
  
# Build complete solution
# (Uses Windows-based runner, because windows tag IS specified.)
build:view:
  stage: build
  # Use a Windows Server Core based docker image
  # The default mcr.microsoft.com/dotnet/sdk:6.0 would depend on Windows Nano Server, 
  # which is not enough for us, as it does not containt the desktop packs.
  image: mcr.microsoft.com/dotnet/sdk:6.0-windowsservercore-ltsc2019
  tags: [windows]
  script:
    - dotnet build CCity.sln

# Test
# (Uses Linux-based runner, because windows tag is NOT specified.)
# test:model:
#   stage: test
#   before_script:    
#     # Restore NuGet packages to the local .nuget folder (inside the project directory).
#     - dotnet restore CCity.Tests --packages .nuget
#   script:
#     - dotnet test CCity.Tests
#   # Cache and keep downloaded NuGet dependencies between CI pipelines
#   cache:
#     # The CI_COMMIT_REF_SLUG is a slug for the branch or tag name,
#     # so there will be a separate cache for each branch.
#     key: "unittest-$CI_COMMIT_REF_SLUG"
#     paths:
#       - .nuget

# Documentation
# (Uses Linux-based runner, because windows tag is NOT specified.)
pages:
  stage: deploy
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq doxygen graphviz
  script:
    - doxygen
    - cp -r doc/html/. public/
    - mkdir public/Assets
    - cp -r Assets/. public/Assets/
  artifacts:
    paths:
      - public
    expire_in: 1 day
  # only:
  #   - master